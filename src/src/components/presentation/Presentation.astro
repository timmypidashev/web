---
// src/components/presentation/Presentation.astro
export interface Props {
  autoStart?: boolean;
  title?: string;
}

const { autoStart = false, title = "Start Presentation" } = Astro.props;
---

<button id="presentation-button" class="presentation-hidden mb-6 px-4 py-2 bg-blue-bright text-background rounded-lg hover:bg-blue transition-colors font-medium" type="button">
  {title}
</button>

<div class="presentation-progress"></div>

<script define:vars={{ autoStart }}>
  const button = document.getElementById("presentation-button");

  let slides = [];
  let slide = 0;
  let presenting = false;

  // Function to initialize slides
  const initSlides = () => {
    const slideElements = Array.from(document.querySelectorAll('.presentation-slide'));
    console.log('Found slides:', slideElements.length); // Debug log
    slides = slideElements.map((el) => el.outerHTML);
    
    // Show button if we have slides and not auto-starting
    if (slides.length && !autoStart) {
      button.classList.remove("presentation-hidden");
    }
    
    // Auto-start if enabled and we have slides
    if (autoStart && slides.length) {
      setTimeout(() => {
        startPresentation();
      }, 100);
    }
  };

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide;
    }
    return slide + 1;
  };

  const prevSlide = () => {
    if (slide === 0) {
      return slide;
    }
    return slide - 1;
  };

  const keyHandlers = {
    ArrowRight: nextSlide,
    ArrowLeft: prevSlide,
  };

  const setProgress = () => {
    const progress = ((slide + 1) / slides.length) * 100;
    document.body.style.setProperty('--presentation-progress', `${progress}%`);
  };

  const startPresentation = () => {
    if (!slides.length) return;
    
    button.innerHTML = "Resume presentation";
    document.body.classList.add("presentation-overflow-hidden");
    presenting = true;
    
    // Create presentation container and content area
    const container = document.createElement('div');
    container.id = 'presentation-container';
    container.className = 'presentation-container';
    
    const content = document.createElement('main');
    content.id = 'presentation-content';
    
    // Initialize with first slide
    const slideWrapper = document.createElement('div');
    slideWrapper.innerHTML = slides[slide];
    const slideElement = slideWrapper.querySelector('.presentation-slide');
    if (slideElement) {
      content.appendChild(slideElement);
    } else {
      content.innerHTML = slides[slide];
    }
    
    // Add slide counter
    const counter = document.createElement('div');
    counter.id = 'slide-counter';
    counter.className = 'fixed bottom-8 right-8 bg-gray-800 bg-opacity-80 text-foreground px-4 py-2 rounded-lg font-mono z-20';
    counter.textContent = `${slide + 1} / ${slides.length}`;
    
    container.appendChild(content);
    container.appendChild(counter);
    document.body.appendChild(container);
    
    setProgress();
    initListeners();
    
    console.log(`Presentation started with ${slides.length} slides`); // Debug log
  };

  const endPresentation = () => {
    document.body.classList.remove("presentation-overflow-hidden");
    presenting = false;
    
    const container = document.getElementById('presentation-container');
    if (container) {
      container.remove();
    }
  };

  const transition = (nextSlideIndex) => {
    if (!presenting || nextSlideIndex === slide || !slides[nextSlideIndex]) {
      return;
    }

    slide = nextSlideIndex;
    
    const content = document.getElementById('presentation-content');
    const counter = document.getElementById('slide-counter');
    
    if (content) {
      // Clear current content
      content.innerHTML = '';
      
      // Create a wrapper div and set the slide content
      const slideWrapper = document.createElement('div');
      slideWrapper.innerHTML = slides[slide];
      
      // Ensure the slide has proper presentation styling
      const slideElement = slideWrapper.querySelector('.presentation-slide');
      if (slideElement) {
        content.appendChild(slideElement);
      } else {
        // Fallback: just add the content directly
        content.innerHTML = slides[slide];
      }
    }
    
    if (counter) {
      counter.textContent = `${slide + 1} / ${slides.length}`;
    }
    
    setProgress();
    
    console.log(`Transitioned to slide ${slide + 1}/${slides.length}`); // Debug log
  };

  let listenersInitialized = false;
  const initListeners = () => {
    if (listenersInitialized) {
      return;
    }

    listenersInitialized = true;
    
    window.addEventListener("keyup", (ev) => {
      console.log(`Key pressed: ${ev.key}`); // Debug log
      ev.preventDefault();
      const isEscape = ev.key === "Escape";
      if (isEscape) {
        endPresentation();
        return;
      }

      const getSlide = keyHandlers[ev.key];
      if (!getSlide) {
        return;
      }

      const nextSlideIndex = getSlide();
      console.log(`Current slide: ${slide}, Next slide: ${nextSlideIndex}`); // Debug log
      transition(nextSlideIndex);
    });

    let touchstartX = 0;
    let touchendX = 0;
    
    const handleGesture = () => {
      const magnitude = Math.abs(touchstartX - touchendX);

      if (magnitude < 40) {
        return;
      }

      if (touchendX < touchstartX) {
        transition(nextSlide());
      }
      if (touchendX > touchstartX) {
        transition(prevSlide());
      }
    };

    document.addEventListener("touchstart", (ev) => {
      touchstartX = ev.changedTouches[0].screenX;
    }, false);

    document.addEventListener("touchend", (event) => {
      touchendX = event.changedTouches[0].screenX;
      handleGesture();
    }, false);
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSlides);
  } else {
    // DOM is already loaded
    initSlides();
  }

  // Also try again after a short delay to catch any dynamically loaded content
  setTimeout(initSlides, 500);

  // Initialize button click handler
  if (button) {
    button.addEventListener("click", startPresentation);
  }
</script>

<style is:global>
  .presentation-progress {
    display: none;
  }

  .presentation-overflow-hidden {
    overflow: hidden;

    .presentation-hidden {
      display: none;
    }

    .presentation-progress {
      transition: width 1000ms;
      display: block;
      position: fixed;
      z-index: 21;
      top: 0px;
      left: 0px;
      width: var(--presentation-progress);
      height: 0.25rem;
      background: #fabd2f;
    }
  }

  .presentation-container {
    z-index: 10;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: auto;
    background-color: #000000;
  }

  #presentation-content {
    display: flex;
    flex-direction: column;
    background-color: #000000;
    color: #ebdbb2;
    box-sizing: border-box;
    min-height: 100vh;
    width: 100%;
    padding: 4rem;
  }

  .presentation-slide {
    width: 100%;
    max-width: 100%;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .presentation-slide.centered {
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .presentation-slide.highlight {
    background-color: #fabd2f;
    color: #000000;
  }

  .presentation-slide.large {
    font-size: x-large;
  }

  .presentation-slide h1 {
    font-size: 3rem;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    color: #fabd2f;
  }

  .presentation-slide h2 {
    font-size: 2.5rem;
    line-height: 1.3;
    margin-bottom: 1rem;
    color: #83a598;
  }

  .presentation-slide h3 {
    font-size: 2rem;
    line-height: 1.4;
    margin-bottom: 0.75rem;
    color: #b8bb26;
  }

  .presentation-slide p {
    font-size: 1.5rem;
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .presentation-slide ul, .presentation-slide ol {
    font-size: 1.25rem;
    line-height: 1.8;
    margin-left: 2rem;
  }

  .presentation-slide li {
    margin-bottom: 0.5rem;
  }

  .presentation-slide code {
    background: #282828;
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-family: 'Comic Code', monospace;
    color: #d3869b;
  }

  .presentation-slide pre {
    background: #282828;
    padding: 1.5rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
    font-size: 1.1rem;
  }

  .presentation-slide pre code {
    background: none;
    padding: 0;
    color: #ebdbb2;
  }

  @media (max-width: 768px) {
    #presentation-content {
      padding: 2rem;
    }
    
    .presentation-slide h1 { font-size: 2rem; }
    .presentation-slide h2 { font-size: 1.75rem; }
    .presentation-slide h3 { font-size: 1.5rem; }
    .presentation-slide p { font-size: 1.25rem; }
    .presentation-slide ul, .presentation-slide ol { font-size: 1.1rem; }
  }

  .presentation-hidden {
    display: none;
  }
</style>
